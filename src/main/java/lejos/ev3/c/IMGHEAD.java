package lejos.ev3.c;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lmstypes.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IMGHEAD extends Structure {
	/**
	 * !< Place holder for the file type identifier<br>
	 * C type : UBYTE[4]
	 */
	public byte[] Sign = new byte[4];
	public byte[] getSign() {
		return Sign;
	}
	public void setSign(byte Sign[]) {
		this.Sign = Sign;
	}
	/**
	 * !< Image size<br>
	 * C type : IMINDEX
	 */
	public NativeLong ImageSize;
	public NativeLong getImageSize() {
		return ImageSize;
	}
	public void setImageSize(NativeLong ImageSize) {
		this.ImageSize = ImageSize;
	}
	/**
	 * !< Version identifier<br>
	 * C type : UWORD
	 */
	public short VersionInfo;
	public short getVersionInfo() {
		return VersionInfo;
	}
	public void setVersionInfo(short VersionInfo) {
		this.VersionInfo = VersionInfo;
	}
	/**
	 * !< Total number of objects in image<br>
	 * C type : OBJID
	 */
	public short NumberOfObjects;
	public short getNumberOfObjects() {
		return NumberOfObjects;
	}
	public void setNumberOfObjects(short NumberOfObjects) {
		this.NumberOfObjects = NumberOfObjects;
	}
	/**
	 * !< Number of bytes to allocate for global variables<br>
	 * C type : GBINDEX
	 */
	public NativeLong GlobalBytes;
	public NativeLong getGlobalBytes() {
		return GlobalBytes;
	}
	public void setGlobalBytes(NativeLong GlobalBytes) {
		this.GlobalBytes = GlobalBytes;
	}
	public IMGHEAD() {
		super();
	}
	public IMGHEAD(Pointer peer) {
		super(peer);
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Sign", "ImageSize", "VersionInfo", "NumberOfObjects", "GlobalBytes");
	}
	/**
	 * @param Sign !< Place holder for the file type identifier<br>
	 * C type : UBYTE[4]<br>
	 * @param ImageSize !< Image size<br>
	 * C type : IMINDEX<br>
	 * @param VersionInfo !< Version identifier<br>
	 * C type : UWORD<br>
	 * @param NumberOfObjects !< Total number of objects in image<br>
	 * C type : OBJID<br>
	 * @param GlobalBytes !< Number of bytes to allocate for global variables<br>
	 * C type : GBINDEX
	 */
	public IMGHEAD(byte Sign[], NativeLong ImageSize, short VersionInfo, short NumberOfObjects, NativeLong GlobalBytes) {
		super();
		if ((Sign.length != this.Sign.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.Sign = Sign;
		this.ImageSize = ImageSize;
		this.VersionInfo = VersionInfo;
		this.NumberOfObjects = NumberOfObjects;
		this.GlobalBytes = GlobalBytes;
	}
	public static class ByReference extends IMGHEAD implements Structure.ByReference {
		
	};
	public static class ByValue extends IMGHEAD implements Structure.ByValue {
		
	};
}

package lejos.ev3.c;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lms2012.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class OBJ extends Structure {
	/**
	 * !< Object instruction pointer<br>
	 * C type : IP
	 */
	public Pointer Ip;
	public Pointer getIp() {
		return Ip;
	}
	public void setIp(Pointer Ip) {
		this.Ip = Ip;
	}
	/**
	 * !< Local variable pointer<br>
	 * C type : LP
	 */
	public Pointer pLocal;
	public Pointer getPLocal() {
		return pLocal;
	}
	public void setPLocal(Pointer pLocal) {
		this.pLocal = pLocal;
	}
	/** !< Object status */
	public byte ObjStatus;
	public byte getObjStatus() {
		return ObjStatus;
	}
	public void setObjStatus(byte ObjStatus) {
		this.ObjStatus = ObjStatus;
	}
	public byte Blocked;
	public byte getBlocked() {
		return Blocked;
	}
	public void setBlocked(byte Blocked) {
		this.Blocked = Blocked;
	}
	/**
	 * !< Different meaning for SUBCALL and BLOCKS<br>
	 * C type : UUnion
	 */
	public UUnion u;
	public UUnion getU() {
		return u;
	}
	public void setU(UUnion u) {
		this.u = u;
	}
	/**
	 * !< Poll of bytes used for local variables<br>
	 * C type : VARDATA[]
	 */
	public Pointer Local;
	public Pointer getLocal() {
		return Local;
	}
	public void setLocal(Pointer Local) {
		this.Local = Local;
	}
	/** <i>native declaration : lms2012.h:556</i> */
	public static class UUnion extends Union {
		/**
		 * !< Caller id used for SUBCALL to save object id to return to<br>
		 * C type : OBJID
		 */
		public short CallerId;
		public short getCallerId() {
			return CallerId;
		}
		public void setCallerId(short CallerId) {
			this.CallerId = CallerId;
		}
		/**
		 * !< Trigger count used by BLOCK's trigger logic<br>
		 * C type : TRIGGER
		 */
		public short TriggerCount;
		public short getTriggerCount() {
			return TriggerCount;
		}
		public void setTriggerCount(short TriggerCount) {
			this.TriggerCount = TriggerCount;
		}
		public UUnion() {
			super();
		}
		public UUnion(Pointer peer) {
			super(peer);
		}
		/**
		 * @param CallerId_or_TriggerCount !< Caller id used for SUBCALL to save object id to return to<br>
		 * C type : OBJID, or !< Trigger count used by BLOCK's trigger logic<br>
		 * C type : TRIGGER
		 */
		public UUnion(short CallerId_or_TriggerCount) {
			super();
			this.TriggerCount = this.CallerId = CallerId_or_TriggerCount;
			setType(Short.TYPE);
		}
		public static class ByReference extends UUnion implements Structure.ByReference {
			
		};
		public static class ByValue extends UUnion implements Structure.ByValue {
			
		};
	};
	public OBJ() {
		super();
	}
	public OBJ(Pointer peer) {
		super(peer);
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Ip", "pLocal", "ObjStatus", "Blocked", "u", "Local");
	}
	/**
	 * @param Ip !< Object instruction pointer<br>
	 * C type : IP<br>
	 * @param pLocal !< Local variable pointer<br>
	 * C type : LP<br>
	 * @param ObjStatus !< Object status<br>
	 * @param u !< Different meaning for SUBCALL and BLOCKS<br>
	 * C type : UUnion<br>
	 * @param Local !< Poll of bytes used for local variables<br>
	 * C type : VARDATA[]
	 */
	public OBJ(Pointer Ip, Pointer pLocal, byte ObjStatus, byte Blocked, UUnion u, Pointer Local) {
		super();
		this.Ip = Ip;
		this.pLocal = pLocal;
		this.ObjStatus = ObjStatus;
		this.Blocked = Blocked;
		this.u = u;
		this.Local = Local;
	}
	public static class ByReference extends OBJ implements Structure.ByReference {
		
	};
	public static class ByValue extends OBJ implements Structure.ByValue {
		
	};
}

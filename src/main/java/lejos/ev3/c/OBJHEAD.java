package lejos.ev3.c;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lmstypes.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class OBJHEAD extends Structure {
	/**
	 * !< Offset to instructions from image start<br>
	 * C type : IP
	 */
	public Pointer OffsetToInstructions;
	public Pointer getOffsetToInstructions() {
		return OffsetToInstructions;
	}
	public void setOffsetToInstructions(Pointer OffsetToInstructions) {
		this.OffsetToInstructions = OffsetToInstructions;
	}
	/**
	 * !< Used by BLOCK's to hold the owner id<br>
	 * C type : OBJID
	 */
	public short OwnerObjectId;
	public short getOwnerObjectId() {
		return OwnerObjectId;
	}
	public void setOwnerObjectId(short OwnerObjectId) {
		this.OwnerObjectId = OwnerObjectId;
	}
	/**
	 * !< Used to determine how many triggers needed before the BLOCK object is activated<br>
	 * C type : TRIGGER
	 */
	public short TriggerCount;
	public short getTriggerCount() {
		return TriggerCount;
	}
	public void setTriggerCount(short TriggerCount) {
		this.TriggerCount = TriggerCount;
	}
	/**
	 * !< Number of bytes to allocate for local variables<br>
	 * C type : LBINDEX
	 */
	public NativeLong LocalBytes;
	public NativeLong getLocalBytes() {
		return LocalBytes;
	}
	public void setLocalBytes(NativeLong LocalBytes) {
		this.LocalBytes = LocalBytes;
	}
	public OBJHEAD() {
		super();
	}
	public OBJHEAD(Pointer address) {
		super(address);
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("OffsetToInstructions", "OwnerObjectId", "TriggerCount", "LocalBytes");
	}
	/**
	 * @param OffsetToInstructions !< Offset to instructions from image start<br>
	 * C type : IP<br>
	 * @param OwnerObjectId !< Used by BLOCK's to hold the owner id<br>
	 * C type : OBJID<br>
	 * @param TriggerCount !< Used to determine how many triggers needed before the BLOCK object is activated<br>
	 * C type : TRIGGER<br>
	 * @param LocalBytes !< Number of bytes to allocate for local variables<br>
	 * C type : LBINDEX
	 */
	public OBJHEAD(Pointer OffsetToInstructions, short OwnerObjectId, short TriggerCount, NativeLong LocalBytes) {
		super();
		this.OffsetToInstructions = OffsetToInstructions;
		this.OwnerObjectId = OwnerObjectId;
		this.TriggerCount = TriggerCount;
		this.LocalBytes = LocalBytes;
	}
	public static class ByReference extends OBJHEAD implements Structure.ByReference {
		
	};
	public static class ByValue extends OBJHEAD implements Structure.ByValue {
		
	};
}

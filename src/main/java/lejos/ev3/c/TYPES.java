package lejos.ev3.c;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : lms2012.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TYPES extends Structure {
	/**
	 * !< Device name<br>
	 * C type : SBYTE[11 + 1]
	 */
	public byte[] Name = new byte[11 + 1];
	public byte[] getName() {
		return Name;
	}
	public void setName(byte Name[]) {
		this.Name = Name;
	}
	/**
	 * !< Device type<br>
	 * C type : DATA8
	 */
	public byte Type;
	public byte getType() {
		return Type;
	}
	public void setType(byte Type) {
		this.Type = Type;
	}
	/** C type : DATA8 */
	public byte Connection;
	public byte getConnection() {
		return Connection;
	}
	public void setConnection(byte Connection) {
		this.Connection = Connection;
	}
	/**
	 * !< Device mode<br>
	 * C type : DATA8
	 */
	public byte Mode;
	public byte getMode() {
		return Mode;
	}
	public void setMode(byte Mode) {
		this.Mode = Mode;
	}
	/** C type : DATA8 */
	public byte DataSets;
	public byte getDataSets() {
		return DataSets;
	}
	public void setDataSets(byte DataSets) {
		this.DataSets = DataSets;
	}
	/** C type : DATA8 */
	public byte Format;
	public byte getFormat() {
		return Format;
	}
	public void setFormat(byte Format) {
		this.Format = Format;
	}
	/** C type : DATA8 */
	public byte Figures;
	public byte getFigures() {
		return Figures;
	}
	public void setFigures(byte Figures) {
		this.Figures = Figures;
	}
	/** C type : DATA8 */
	public byte Decimals;
	public byte getDecimals() {
		return Decimals;
	}
	public void setDecimals(byte Decimals) {
		this.Decimals = Decimals;
	}
	/** C type : DATA8 */
	public byte Views;
	public byte getViews() {
		return Views;
	}
	public void setViews(byte Views) {
		this.Views = Views;
	}
	/**
	 * !< Raw minimum value      (e.c. 0.0)<br>
	 * C type : DATAF
	 */
	public float RawMin;
	public float getRawMin() {
		return RawMin;
	}
	public void setRawMin(float RawMin) {
		this.RawMin = RawMin;
	}
	/**
	 * !< Raw maximum value      (e.c. 1023.0)<br>
	 * C type : DATAF
	 */
	public float RawMax;
	public float getRawMax() {
		return RawMax;
	}
	public void setRawMax(float RawMax) {
		this.RawMax = RawMax;
	}
	/**
	 * !< Percent minimum value  (e.c. -100.0)<br>
	 * C type : DATAF
	 */
	public float PctMin;
	public float getPctMin() {
		return PctMin;
	}
	public void setPctMin(float PctMin) {
		this.PctMin = PctMin;
	}
	/**
	 * !< Percent maximum value  (e.c. 100.0)<br>
	 * C type : DATAF
	 */
	public float PctMax;
	public float getPctMax() {
		return PctMax;
	}
	public void setPctMax(float PctMax) {
		this.PctMax = PctMax;
	}
	/**
	 * !< SI unit minimum value  (e.c. -100.0)<br>
	 * C type : DATAF
	 */
	public float SiMin;
	public float getSiMin() {
		return SiMin;
	}
	public void setSiMin(float SiMin) {
		this.SiMin = SiMin;
	}
	/**
	 * !< SI unit maximum value  (e.c. 100.0)<br>
	 * C type : DATAF
	 */
	public float SiMax;
	public float getSiMax() {
		return SiMax;
	}
	public void setSiMax(float SiMax) {
		this.SiMax = SiMax;
	}
	/**
	 * !< mS from type change to valid data<br>
	 * C type : UWORD
	 */
	public short InvalidTime;
	public short getInvalidTime() {
		return InvalidTime;
	}
	public void setInvalidTime(short InvalidTime) {
		this.InvalidTime = InvalidTime;
	}
	/**
	 * !< Device id value        (e.c. 0 ~ UART)<br>
	 * C type : UWORD
	 */
	public short IdValue;
	public short getIdValue() {
		return IdValue;
	}
	public void setIdValue(short IdValue) {
		this.IdValue = IdValue;
	}
	/**
	 * !< Device pin setup<br>
	 * C type : DATA8
	 */
	public byte Pins;
	public byte getPins() {
		return Pins;
	}
	public void setPins(byte Pins) {
		this.Pins = Pins;
	}
	/**
	 * !< SI unit symbol<br>
	 * C type : SBYTE[4 + 1]
	 */
	public byte[] Symbol = new byte[4 + 1];
	public byte[] getSymbol() {
		return Symbol;
	}
	public void setSymbol(byte Symbol[]) {
		this.Symbol = Symbol;
	}
	/** C type : UWORD */
	public short Align;
	public short getAlign() {
		return Align;
	}
	public void setAlign(short Align) {
		this.Align = Align;
	}
	public TYPES() {
		super();
	}
	public TYPES(Pointer address) {
		super(address);
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("Name", "Type", "Connection", "Mode", "DataSets", "Format", "Figures", "Decimals", "Views", "RawMin", "RawMax", "PctMin", "PctMax", "SiMin", "SiMax", "InvalidTime", "IdValue", "Pins", "Symbol", "Align");
	}
	public static class ByReference extends TYPES implements Structure.ByReference {
		
	};
	public static class ByValue extends TYPES implements Structure.ByValue {
		
	};
}
